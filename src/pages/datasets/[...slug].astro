---
import { getDatasetById } from '../../data/datasets';
import DatasetLayout from '../../layouts/DatasetLayout.astro';
import { SITE_TITLE } from '../../consts';

export async function getStaticPaths() {
  const datasets = await import('../../data/datasets');
  return datasets.datasets.map((dataset) => ({
    params: { slug: dataset['@id'] },
    props: { dataset },
  }));
}

const { dataset } = Astro.props;

if (!dataset) {
  return Astro.redirect('/site/404');
}

// Helper function to safely extract string values from SchemaValue
function extractString(value: any): string | undefined {
  if (typeof value === 'string') return value;
  if (value && typeof value === 'object' && 'name' in value) return value.name;
  return undefined;
}

// Helper function to safely extract array values
function extractArray(value: any): any[] {
  if (Array.isArray(value)) return value;
  return [];
}

// Create a compatible dataset object for the layout
const compatibleDataset = {
  name: extractString(dataset.name) || 'Unnamed Dataset',
  description: extractString(dataset.description) || 'No description available',
  url: extractString(dataset.url) || '#',
  license: extractString(dataset.license),
  creator: extractString(dataset.creator),
  datePublished: extractString(dataset.datePublished),
  dateModified: extractString(dataset.dateModified),
  keywords: extractArray(dataset.keywords).map(k => extractString(k)).filter(Boolean) as string[],
  distribution: extractArray(dataset.distribution).map(item => ({
    name: extractString(item.name) || 'Unknown',
    description: extractString(item.description),
    encodingFormat: extractString(item.encodingFormat),
    contentUrl: extractString(item.contentUrl) || '#',
    fileSize: extractString(item.fileSize)
  }))
};
---

<DatasetLayout title={compatibleDataset.name} dataset={compatibleDataset}>
  <h2>Dataset Overview</h2>
  <p>{compatibleDataset.description}</p>
  
  {compatibleDataset.keywords && compatibleDataset.keywords.length > 0 && (
    <>
      <h3>Keywords</h3>
      <div class="keywords">
        {compatibleDataset.keywords.map((keyword) => (
          <span class="keyword-tag">{keyword}</span>
        ))}
      </div>
    </>
  )}
  
  {compatibleDataset.distribution && compatibleDataset.distribution.length > 0 && (
    <>
      <h3>Data Distribution</h3>
      <div class="distribution">
        {compatibleDataset.distribution.map((item) => (
          <div class="distribution-item">
            <h4>{item.name}</h4>
            {item.description && <p>{item.description}</p>}
            {item.encodingFormat && (
              <p><strong>Format:</strong> {item.encodingFormat}</p>
            )}
            {item.contentUrl && item.contentUrl !== '#' && (
              <p><a href={item.contentUrl} target="_blank" rel="noopener noreferrer">Download</a></p>
            )}
          </div>
        ))}
      </div>
    </>
  )}
  
  {compatibleDataset.creator && (
    <>
      <h3>Creator</h3>
      <p>{compatibleDataset.creator}</p>
    </>
  )}
  
  {compatibleDataset.license && (
    <>
      <h3>License</h3>
      <p><a href={compatibleDataset.license} target="_blank" rel="noopener noreferrer">View License</a></p>
    </>
  )}
  
  {compatibleDataset.datePublished && (
    <>
      <h3>Publication Date</h3>
      <p>{compatibleDataset.datePublished}</p>
    </>
  )}
  
  {compatibleDataset.dateModified && (
    <>
      <h3>Last Modified</h3>
      <p>{compatibleDataset.dateModified}</p>
    </>
  )}
</DatasetLayout>

<style>
  .keywords {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 1rem 0;
  }
  
  .keyword-tag {
    background: rgb(var(--accent));
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  .distribution {
    display: grid;
    gap: 1.5rem;
    margin: 1.5rem 0;
  }
  
  .distribution-item {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    border-left: 4px solid rgb(var(--accent));
  }
  
  .distribution-item h4 {
    margin: 0 0 1rem 0;
    color: rgb(var(--black));
  }
  
  .distribution-item p {
    margin: 0.5rem 0;
    color: rgb(var(--gray));
    line-height: 1.6;
  }
  
  .distribution-item a {
    color: rgb(var(--accent));
    text-decoration: none;
    font-weight: 500;
  }
  
  .distribution-item a:hover {
    text-decoration: underline;
  }
  
  h3 {
    color: rgb(var(--black));
    margin: 2rem 0 1rem 0;
    border-bottom: 2px solid rgb(var(--accent));
    padding-bottom: 0.5rem;
  }
  
  h2 {
    color: rgb(var(--black));
    margin: 2rem 0 1rem 0;
  }
</style>
